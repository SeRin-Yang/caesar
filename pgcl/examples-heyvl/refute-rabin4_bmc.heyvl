// Auto-generated by pgcl2heyvl from fail-rabin4_bmc.pgcl
//
// HeyVL file to show that
//     ([(1 < i) && (phase == 0)] * (1/3)) + ([!((1 < i) && (phase == 0))] * 1) >= wp[C]([i == 1])
// DOES NOT HOLD
// using bounded model checking with k = 5 and invariant = ([(1 < i) && (phase == 0)] * (1/3)) + ([!((1 < i) && (phase == 0))] * 1)
// for the pGCL program C:
//
//     nat i;
//     nat n;
//     nat d;
//     nat phase;
//     while ((1 < i) || (phase = 1)) {
//         if (phase = 0) {
//             n := i;
//             phase := 1;
//         } else {
//             if (0 < n) {
//                 {
//                     d := 0;
//                 } [0.5] {
//                     d := 1;
//                 }
//                 i := i - d;
//                 n := n - 1;
//             } else {
//                 phase := 0;
//             }
//         }
//     }

coproc bounded_model_checking(init_i: UInt, init_n: UInt, init_d: UInt, init_phase: UInt) -> (i: UInt, n: UInt, d: UInt, phase: UInt)
    pre ([(1 < init_i) && (init_phase == 0)] * (1/3)) + ([!((1 < init_i) && (init_phase == 0))] * 1)
    post [i == 1]
{
    var prob_choice: Bool
    i = init_i
    n = init_n
    d = init_d
    phase = init_phase
    if (1 < i) || (phase == 1) {
        if phase == 0 {
            n = i
            phase = 1
        } else {
            if 0 < n {
                prob_choice = flip(0.5)
                if prob_choice {
                    d = 0
                } else {
                    d = 1
                }
                i = i - d
                n = n - 1
            } else {
                phase = 0
            }
        }
        if (1 < i) || (phase == 1) {
            if phase == 0 {
                n = i
                phase = 1
            } else {
                if 0 < n {
                    prob_choice = flip(0.5)
                    if prob_choice {
                        d = 0
                    } else {
                        d = 1
                    }
                    i = i - d
                    n = n - 1
                } else {
                    phase = 0
                }
            }
            if (1 < i) || (phase == 1) {
                if phase == 0 {
                    n = i
                    phase = 1
                } else {
                    if 0 < n {
                        prob_choice = flip(0.5)
                        if prob_choice {
                            d = 0
                        } else {
                            d = 1
                        }
                        i = i - d
                        n = n - 1
                    } else {
                        phase = 0
                    }
                }
                if (1 < i) || (phase == 1) {
                    if phase == 0 {
                        n = i
                        phase = 1
                    } else {
                        if 0 < n {
                            prob_choice = flip(0.5)
                            if prob_choice {
                                d = 0
                            } else {
                                d = 1
                            }
                            i = i - d
                            n = n - 1
                        } else {
                            phase = 0
                        }
                    }
                    if (1 < i) || (phase == 1) {
                        if phase == 0 {
                            n = i
                            phase = 1
                        } else {
                            if 0 < n {
                                prob_choice = flip(0.5)
                                if prob_choice {
                                    d = 0
                                } else {
                                    d = 1
                                }
                                i = i - d
                                n = n - 1
                            } else {
                                phase = 0
                            }
                        }
                        assert 0
                        assume 0
                    } else {}
                } else {}
            } else {}
        } else {}
    } else {}
}
