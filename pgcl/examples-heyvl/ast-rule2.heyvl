// Auto-generated by pgcl2heyvl from ast-rule2.pgcl
//
// HeyVL file to show that C is almost-surely terminating
// using AST rule by McIver et al. (2018) with
// invariant = true, variant = [0 < x] + [(1 <= x) && (x <= 2)], probability function p(v) = 0.5, decrease function d(v) = 1
// for the pGCL program C:
//
//     nat x;
//     while (0 < x) {
//         if (x = 1) {
//             {
//                 x := 0;
//             } [1/2] {
//                 x := x + 1;
//             }
//         } else {
//             if (3 <= x) {
//                 x := 0;
//             } else {
//                 x := x + 1;
//             }
//         }
//     }

proc main(init_x: UInt) -> (x: UInt)
{
    var prob_choice: Bool
    x = init_x
    @ast(true, [0 < x] + [(1 <= x) && (x <= 2)], v, 0.5, 1)
    while 0 < x {
        if x == 1 {
            prob_choice = flip((1/2))
            if prob_choice {
                x = 0
            } else {
                x = x + 1
            }
        } else {
            if 3 <= x {
                x = 0
            } else {
                x = x + 1
            }
        }
    }
}
