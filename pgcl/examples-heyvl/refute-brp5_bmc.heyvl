// Auto-generated by pgcl2heyvl from fail-brp5_bmc.pgcl
//
// HeyVL file to show that
//     totalFailed + 1 >= wp[C](totalFailed)
// DOES NOT HOLD
// using bounded model checking with k = 14 and invariant = totalFailed + 1
// for the pGCL program C:
//
//     nat toSend;
//     nat sent;
//     nat maxFailed;
//     nat failed;
//     nat totalFailed;
//     while ((failed < maxFailed) & (sent < toSend)) {
//         {
//             failed := 0;
//             sent := sent + 1;
//         } [0.9] {
//             failed := failed + 1;
//             totalFailed := totalFailed + 1;
//         }
//     }

coproc bounded_model_checking(init_toSend: UInt, init_sent: UInt, init_maxFailed: UInt, init_failed: UInt, init_totalFailed: UInt) -> (toSend: UInt, sent: UInt, maxFailed: UInt, failed: UInt, totalFailed: UInt)
    pre init_totalFailed + 1
    post totalFailed
{
    var prob_choice: Bool
    toSend = init_toSend
    sent = init_sent
    maxFailed = init_maxFailed
    failed = init_failed
    totalFailed = init_totalFailed
    if (failed < maxFailed) && (sent < toSend) {
        prob_choice = flip(0.9)
        if prob_choice {
            failed = 0
            sent = sent + 1
        } else {
            failed = failed + 1
            totalFailed = totalFailed + 1
        }
        if (failed < maxFailed) && (sent < toSend) {
            prob_choice = flip(0.9)
            if prob_choice {
                failed = 0
                sent = sent + 1
            } else {
                failed = failed + 1
                totalFailed = totalFailed + 1
            }
            if (failed < maxFailed) && (sent < toSend) {
                prob_choice = flip(0.9)
                if prob_choice {
                    failed = 0
                    sent = sent + 1
                } else {
                    failed = failed + 1
                    totalFailed = totalFailed + 1
                }
                if (failed < maxFailed) && (sent < toSend) {
                    prob_choice = flip(0.9)
                    if prob_choice {
                        failed = 0
                        sent = sent + 1
                    } else {
                        failed = failed + 1
                        totalFailed = totalFailed + 1
                    }
                    if (failed < maxFailed) && (sent < toSend) {
                        prob_choice = flip(0.9)
                        if prob_choice {
                            failed = 0
                            sent = sent + 1
                        } else {
                            failed = failed + 1
                            totalFailed = totalFailed + 1
                        }
                        if (failed < maxFailed) && (sent < toSend) {
                            prob_choice = flip(0.9)
                            if prob_choice {
                                failed = 0
                                sent = sent + 1
                            } else {
                                failed = failed + 1
                                totalFailed = totalFailed + 1
                            }
                            if (failed < maxFailed) && (sent < toSend) {
                                prob_choice = flip(0.9)
                                if prob_choice {
                                    failed = 0
                                    sent = sent + 1
                                } else {
                                    failed = failed + 1
                                    totalFailed = totalFailed + 1
                                }
                                if (failed < maxFailed) && (sent < toSend) {
                                    prob_choice = flip(0.9)
                                    if prob_choice {
                                        failed = 0
                                        sent = sent + 1
                                    } else {
                                        failed = failed + 1
                                        totalFailed = totalFailed + 1
                                    }
                                    if (failed < maxFailed) && (sent < toSend) {
                                        prob_choice = flip(0.9)
                                        if prob_choice {
                                            failed = 0
                                            sent = sent + 1
                                        } else {
                                            failed = failed + 1
                                            totalFailed = totalFailed + 1
                                        }
                                        if (failed < maxFailed) && (sent < toSend) {
                                            prob_choice = flip(0.9)
                                            if prob_choice {
                                                failed = 0
                                                sent = sent + 1
                                            } else {
                                                failed = failed + 1
                                                totalFailed = totalFailed + 1
                                            }
                                            if (failed < maxFailed) && (sent < toSend) {
                                                prob_choice = flip(0.9)
                                                if prob_choice {
                                                    failed = 0
                                                    sent = sent + 1
                                                } else {
                                                    failed = failed + 1
                                                    totalFailed = totalFailed + 1
                                                }
                                                if (failed < maxFailed) && (sent < toSend) {
                                                    prob_choice = flip(0.9)
                                                    if prob_choice {
                                                        failed = 0
                                                        sent = sent + 1
                                                    } else {
                                                        failed = failed + 1
                                                        totalFailed = totalFailed + 1
                                                    }
                                                    if (failed < maxFailed) && (sent < toSend) {
                                                        prob_choice = flip(0.9)
                                                        if prob_choice {
                                                            failed = 0
                                                            sent = sent + 1
                                                        } else {
                                                            failed = failed + 1
                                                            totalFailed = totalFailed + 1
                                                        }
                                                        if (failed < maxFailed) && (sent < toSend) {
                                                            prob_choice = flip(0.9)
                                                            if prob_choice {
                                                                failed = 0
                                                                sent = sent + 1
                                                            } else {
                                                                failed = failed + 1
                                                                totalFailed = totalFailed + 1
                                                            }
                                                            assert 0
                                                            assume 0
                                                        } else {}
                                                    } else {}
                                                } else {}
                                            } else {}
                                        } else {}
                                    } else {}
                                } else {}
                            } else {}
                        } else {}
                    } else {}
                } else {}
            } else {}
        } else {}
    } else {}
}
