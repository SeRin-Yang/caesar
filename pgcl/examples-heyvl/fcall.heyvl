// Auto-generated by pgcl2heyvl from fcall.pgcl
//
// HeyVL file to show
//     2 * (n - x) >= ert[C](0)
// using k-induction with k = 1 and invariant = 2 * (n - x)
// for the pGCL program C:
//
//     nat x;
//     nat n;
//     nat r;
//     while (x < n) {
//         {
//             r := 0;
//         } [1/2] {
//             r := 1;
//         }
//         x := x + r;
//         tick(1);
//     }

coproc k_induction(init_x: UInt, init_n: UInt, init_r: UInt) -> (x: UInt, n: UInt, r: UInt)
    pre 2 * (init_n - init_x)
    post 0
{
    var prob_choice: Bool
    x = init_x
    n = init_n
    r = init_r
    coassert 2 * (n - x)
    cohavoc r, x
    covalidate
    coassume 2 * (n - x)
    if x < n {
        prob_choice = flip((1/2))
        if prob_choice {
            r = 0
        } else {
            r = 1
        }
        x = x + r
        tick 1
        assert 2 * (n - x)
        assume 0
    } else {}
}
