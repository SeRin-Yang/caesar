// Auto-generated by pgcl2heyvl from ast-rule.pgcl
//
// HeyVL file to show that C is almost-surely terminating
// using AST rule by McIver et al. (2018) with
// invariant = true, variant = (3 * [!((x % 2) == 0)]) + (([10 <= x] * (x - 10)) + ([!(10 <= x)] * (10 - x))), probability function p(v) = 0.5, decrease function d(v) = 2
// for the pGCL program C:
//
//     nat x;
//     while (not (x = 10)) {
//         if ((x % 2) = 0) {
//             {
//                 x := x - 2;
//             } [1/2] {
//                 x := x + 2;
//             }
//         } else {
//             x := x + 1;
//         }
//     }

// forall l. (v <= l) ==> (prob(l) <= prob(v))
proc prob_antitone(x: UInt, v: UReal) -> ()
{
    assert ?(forall l: UReal.  (v <= l) ==> (0.5 <= 0.5))
}

// forall l. (v <= l) ==> (decrease(l) <= decrease(v))
proc decrease_antitone(x: UInt, v: UReal) -> ()
{
    assert ?(forall l: UReal. (v <= l) ==> (2 <= 2))
}

// [I] <= \Phi_{[I]}([I])
proc I_wp_subinvariant(init_x: UInt) -> (x: UInt)
    pre [true]
    post [true]
{
    var prob_choice: Bool
    x = init_x
    if !(x == 10) {
        if (x % 2) == 0 {
            prob_choice = flip((1/2))
            if prob_choice {
                x = x - 2
            } else {
                x = x + 2
            }
        } else {
            x = x + 1
        }
    } else {}
}

// !G iff V = 0
proc termination_condition(x: UInt) -> ()
{
    assert ?(!(!(x == 10)) == ((3 * [!((x % 2) == 0)]) + (([10 <= x] * (x - 10)) + ([!(10 <= x)] * (10 - x))) == 0))
}

// \Phi_{V}(V) <= V
coproc V_wp_superinvariant(init_x: UInt) -> (x: UInt)
    pre (3 * [!((init_x % 2) == 0)]) + (([10 <= init_x] * (init_x - 10)) + ([!(10 <= init_x)] * (10 - init_x)))
    post (3 * [!((x % 2) == 0)]) + (([10 <= x] * (x - 10)) + ([!(10 <= x)] * (10 - x)))
{
    var prob_choice: Bool
    x = init_x
    if !(x == 10) {
        if (x % 2) == 0 {
            prob_choice = flip((1/2))
            if prob_choice {
                x = x - 2
            } else {
                x = x + 2
            }
        } else {
            x = x + 1
        }
    } else {}
}

// [I] * [G] * (p o V) <= \s. wp[P]([V < V(s) - d(V(s))])(s)
proc progress_condition(init_x: UInt) -> (x: UInt)
    pre [true] * ([!(init_x == 10)] * 0.5)
    post [((3 * [!((x % 2) == 0)]) + (([10 <= x] * (x - 10)) + ([!(10 <= x)] * (10 - x)))) <= (((3 * [!((init_x % 2) == 0)]) + (([10 <= init_x] * (init_x - 10)) + ([!(10 <= init_x)] * (10 - init_x)))) - 2)]
{
    var prob_choice: Bool
    x = init_x
    if (x % 2) == 0 {
        prob_choice = flip((1/2))
        if prob_choice {
            x = x - 2
        } else {
            x = x + 2
        }
    } else {
        x = x + 1
    }
}
