// Auto-generated by pgcl2heyvl from rabin1.pgcl
//
// HeyVL file to show
//     ([((1 < i) && (i < 2)) && (phase == 0)] * (2/3)) + ([!(((1 < i) && (i < 2)) && (phase == 0))] * 1) >= wp[C]([i == 1])
// using k-induction with k = 1 and invariant = ([((1 < i) && (i < 2)) && (phase == 0)] * (2/3)) + ([!(((1 < i) && (i < 2)) && (phase == 0))] * 1)
// for the pGCL program C:
//
//     nat i;
//     nat n;
//     nat d;
//     nat phase;
//     while ((1 < i) || (phase = 1)) {
//         if (phase = 0) {
//             n := i;
//             phase := 1;
//         } else {
//             if (0 < n) {
//                 {
//                     d := 0;
//                 } [0.5] {
//                     d := 1;
//                 }
//                 i := i - d;
//                 n := n - 1;
//             } else {
//                 phase := 0;
//             }
//         }
//     }

coproc k_induction(init_i: UInt, init_n: UInt, init_d: UInt, init_phase: UInt) -> (i: UInt, n: UInt, d: UInt, phase: UInt)
    pre ([((1 < init_i) && (init_i < 2)) && (init_phase == 0)] * (2/3)) + ([!(((1 < init_i) && (init_i < 2)) && (init_phase == 0))] * 1)
    post [i == 1]
{
    var prob_choice: Bool
    i = init_i
    n = init_n
    d = init_d
    phase = init_phase
    coassert ([((1 < i) && (i < 2)) && (phase == 0)] * (2/3)) + ([!(((1 < i) && (i < 2)) && (phase == 0))] * 1)
    cohavoc d, i, n, phase
    covalidate
    coassume ([((1 < i) && (i < 2)) && (phase == 0)] * (2/3)) + ([!(((1 < i) && (i < 2)) && (phase == 0))] * 1)
    if (1 < i) || (phase == 1) {
        if phase == 0 {
            n = i
            phase = 1
        } else {
            if 0 < n {
                prob_choice = flip(0.5)
                if prob_choice {
                    d = 0
                } else {
                    d = 1
                }
                i = i - d
                n = n - 1
            } else {
                phase = 0
            }
        }
        assert ([((1 < i) && (i < 2)) && (phase == 0)] * (2/3)) + ([!(((1 < i) && (i < 2)) && (phase == 0))] * 1)
        assume 0
    } else {}
}
