// Auto-generated by pgcl2heyvl from 2drwalk.pgcl
//
// HeyVL file to show
//     2 * ((n + 1) - d) >= ert[C](0)
// using k-induction with k = 1 and invariant = 2 * ((n + 1) - d)
// for the pGCL program C:
//
//     nat x;
//     nat y;
//     nat d;
//     nat n;
//     while (d < n) {
//         if (0 < x) {
//             if (0 < y) {
//                 {
//                     x := x + 2;
//                     d := d + 2;
//                 } [1/4] {
//                     {
//                         y := y + 2;
//                         d := d + 2;
//                     } [1/3] {
//                         {
//                             x := x - 1;
//                             d := d - 1;
//                         } [1/2] {
//                             y := y - 1;
//                             d := d - 1;
//                         }
//                     }
//                 }
//             } else {
//                 if (y < 0) {
//                     {
//                         x := x + 2;
//                         d := d + 2;
//                     } [1/4] {
//                         {
//                             y := y + 1;
//                             d := d - 1;
//                         } [1/3] {
//                             {
//                                 x := x - 1;
//                                 d := d - 1;
//                             } [1/2] {
//                                 y := y - 2;
//                                 d := d + 2;
//                             }
//                         }
//                     }
//                 } else {
//                     {
//                         x := x + 2;
//                         d := d + 2;
//                     } [1/4] {
//                         {
//                             y := y + 1;
//                             d := d + 1;
//                         } [1/3] {
//                             {
//                                 x := x - 1;
//                                 d := d - 1;
//                             } [1/2] {
//                                 y := y - 1;
//                                 d := d + 1;
//                             }
//                         }
//                     }
//                 }
//             }
//         } else {
//             if (x < 0) {
//                 if (0 < y) {
//                     {
//                         x := x + 1;
//                         d := d - 1;
//                     } [1/4] {
//                         {
//                             y := y + 2;
//                             d := d + 2;
//                         } [1/3] {
//                             {
//                                 x := x - 2;
//                                 d := d + 2;
//                             } [1/2] {
//                                 y := y - 1;
//                                 d := d - 1;
//                             }
//                         }
//                     }
//                 } else {
//                     if (y < 0) {
//                         {
//                             x := x + 1;
//                             d := d - 1;
//                         } [1/4] {
//                             {
//                                 y := y + 1;
//                                 d := d - 1;
//                             } [1/3] {
//                                 {
//                                     x := x - 2;
//                                     d := d + 2;
//                                 } [1/2] {
//                                     y := y - 2;
//                                     d := d + 2;
//                                 }
//                             }
//                         }
//                     } else {
//                         {
//                             x := x + 1;
//                             d := d - 1;
//                         } [1/4] {
//                             {
//                                 y := y + 1;
//                                 d := d + 1;
//                             } [1/3] {
//                                 {
//                                     x := x - 2;
//                                     d := d + 2;
//                                 } [1/2] {
//                                     y := y - 1;
//                                     d := d + 1;
//                                 }
//                             }
//                         }
//                     }
//                 }
//             } else {
//                 if (0 < y) {
//                     {
//                         x := x + 1;
//                         d := d + 1;
//                     } [1/4] {
//                         {
//                             y := y + 2;
//                             d := d + 2;
//                         } [1/3] {
//                             {
//                                 x := x - 1;
//                                 d := d + 1;
//                             } [1/2] {
//                                 y := y - 1;
//                                 d := d - 1;
//                             }
//                         }
//                     }
//                 } else {
//                     if (y < 0) {
//                         {
//                             x := x + 1;
//                             d := d + 1;
//                         } [1/4] {
//                             {
//                                 y := y + 1;
//                                 d := d - 1;
//                             } [1/3] {
//                                 {
//                                     x := x - 1;
//                                     d := d + 1;
//                                 } [1/2] {
//                                     y := y - 2;
//                                     d := d + 2;
//                                 }
//                             }
//                         }
//                     } else {
//                         {
//                             x := x + 1;
//                             d := d + 1;
//                         } [1/4] {
//                             {
//                                 y := y + 1;
//                                 d := d + 1;
//                             } [1/3] {
//                                 {
//                                     x := x - 1;
//                                     d := d + 1;
//                                 } [1/2] {
//                                     y := y - 1;
//                                     d := d + 1;
//                                 }
//                             }
//                         }
//                     }
//                 }
//             }
//         }
//         tick(1);
//     }

coproc k_induction(init_x: UInt, init_y: UInt, init_d: UInt, init_n: UInt) -> (x: UInt, y: UInt, d: UInt, n: UInt)
    pre 2 * ((init_n + 1) - init_d)
    post 0
{
    var prob_choice: Bool
    x = init_x
    y = init_y
    d = init_d
    n = init_n
    coassert 2 * ((n + 1) - d)
    cohavoc d, x, y
    covalidate
    coassume 2 * ((n + 1) - d)
    if d < n {
        if 0 < x {
            if 0 < y {
                prob_choice = flip((1/4))
                if prob_choice {
                    x = x + 2
                    d = d + 2
                } else {
                    prob_choice = flip((1/3))
                    if prob_choice {
                        y = y + 2
                        d = d + 2
                    } else {
                        prob_choice = flip((1/2))
                        if prob_choice {
                            x = x - 1
                            d = d - 1
                        } else {
                            y = y - 1
                            d = d - 1
                        }
                    }
                }
            } else {
                if y < 0 {
                    prob_choice = flip((1/4))
                    if prob_choice {
                        x = x + 2
                        d = d + 2
                    } else {
                        prob_choice = flip((1/3))
                        if prob_choice {
                            y = y + 1
                            d = d - 1
                        } else {
                            prob_choice = flip((1/2))
                            if prob_choice {
                                x = x - 1
                                d = d - 1
                            } else {
                                y = y - 2
                                d = d + 2
                            }
                        }
                    }
                } else {
                    prob_choice = flip((1/4))
                    if prob_choice {
                        x = x + 2
                        d = d + 2
                    } else {
                        prob_choice = flip((1/3))
                        if prob_choice {
                            y = y + 1
                            d = d + 1
                        } else {
                            prob_choice = flip((1/2))
                            if prob_choice {
                                x = x - 1
                                d = d - 1
                            } else {
                                y = y - 1
                                d = d + 1
                            }
                        }
                    }
                }
            }
        } else {
            if x < 0 {
                if 0 < y {
                    prob_choice = flip((1/4))
                    if prob_choice {
                        x = x + 1
                        d = d - 1
                    } else {
                        prob_choice = flip((1/3))
                        if prob_choice {
                            y = y + 2
                            d = d + 2
                        } else {
                            prob_choice = flip((1/2))
                            if prob_choice {
                                x = x - 2
                                d = d + 2
                            } else {
                                y = y - 1
                                d = d - 1
                            }
                        }
                    }
                } else {
                    if y < 0 {
                        prob_choice = flip((1/4))
                        if prob_choice {
                            x = x + 1
                            d = d - 1
                        } else {
                            prob_choice = flip((1/3))
                            if prob_choice {
                                y = y + 1
                                d = d - 1
                            } else {
                                prob_choice = flip((1/2))
                                if prob_choice {
                                    x = x - 2
                                    d = d + 2
                                } else {
                                    y = y - 2
                                    d = d + 2
                                }
                            }
                        }
                    } else {
                        prob_choice = flip((1/4))
                        if prob_choice {
                            x = x + 1
                            d = d - 1
                        } else {
                            prob_choice = flip((1/3))
                            if prob_choice {
                                y = y + 1
                                d = d + 1
                            } else {
                                prob_choice = flip((1/2))
                                if prob_choice {
                                    x = x - 2
                                    d = d + 2
                                } else {
                                    y = y - 1
                                    d = d + 1
                                }
                            }
                        }
                    }
                }
            } else {
                if 0 < y {
                    prob_choice = flip((1/4))
                    if prob_choice {
                        x = x + 1
                        d = d + 1
                    } else {
                        prob_choice = flip((1/3))
                        if prob_choice {
                            y = y + 2
                            d = d + 2
                        } else {
                            prob_choice = flip((1/2))
                            if prob_choice {
                                x = x - 1
                                d = d + 1
                            } else {
                                y = y - 1
                                d = d - 1
                            }
                        }
                    }
                } else {
                    if y < 0 {
                        prob_choice = flip((1/4))
                        if prob_choice {
                            x = x + 1
                            d = d + 1
                        } else {
                            prob_choice = flip((1/3))
                            if prob_choice {
                                y = y + 1
                                d = d - 1
                            } else {
                                prob_choice = flip((1/2))
                                if prob_choice {
                                    x = x - 1
                                    d = d + 1
                                } else {
                                    y = y - 2
                                    d = d + 2
                                }
                            }
                        }
                    } else {
                        prob_choice = flip((1/4))
                        if prob_choice {
                            x = x + 1
                            d = d + 1
                        } else {
                            prob_choice = flip((1/3))
                            if prob_choice {
                                y = y + 1
                                d = d + 1
                            } else {
                                prob_choice = flip((1/2))
                                if prob_choice {
                                    x = x - 1
                                    d = d + 1
                                } else {
                                    y = y - 1
                                    d = d + 1
                                }
                            }
                        }
                    }
                }
            }
        }
        tick 1
        assert 2 * ((n + 1) - d)
        assume 0
    } else {}
}
