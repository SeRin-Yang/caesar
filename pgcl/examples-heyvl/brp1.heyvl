// Auto-generated by pgcl2heyvl from brp1.pgcl
//
// HeyVL file to show
//     ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞) >= wp[C](totalFailed)
// using k-induction with k = 5 and invariant = ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
// for the pGCL program C:
//
//     nat toSend;
//     nat sent;
//     nat maxFailed;
//     nat failed;
//     nat totalFailed;
//     while ((failed < maxFailed) & (sent < toSend)) {
//         {
//             failed := 0;
//             sent := sent + 1;
//         } [0.9] {
//             failed := failed + 1;
//             totalFailed := totalFailed + 1;
//         }
//     }

@wp
coproc main(init_toSend: UInt, init_sent: UInt, init_maxFailed: UInt, init_failed: UInt, init_totalFailed: UInt) -> (toSend: UInt, sent: UInt, maxFailed: UInt, failed: UInt, totalFailed: UInt)
    pre ([init_toSend <= 4] * (init_totalFailed + 1)) + ([!(init_toSend <= 4)] * ∞)
    post totalFailed
{
    var prob_choice: Bool
    toSend = init_toSend
    sent = init_sent
    maxFailed = init_maxFailed
    failed = init_failed
    totalFailed = init_totalFailed
    @k_induction(5, ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞))
    while (failed < maxFailed) && (sent < toSend) {
        prob_choice = flip(0.9)
        if prob_choice {
            failed = 0
            sent = sent + 1
        } else {
            failed = failed + 1
            totalFailed = totalFailed + 1
        }
    }
}
