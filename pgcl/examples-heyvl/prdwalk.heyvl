// Auto-generated by pgcl2heyvl from prdwalk.pgcl
//
// HeyVL file to show
//     1.14286 * ((n + 4) - x) >= ert[C](0)
// using k-induction with k = 1 and invariant = 1.14286 * ((n + 4) - x)
// for the pGCL program C:
//
//     nat x;
//     nat n;
//     nat r;
//     while (x < n) {
//         {
//             {
//                 r := 0;
//             } [1/3] {
//                 {
//                     r := 1;
//                 } [1/2] {
//                     r := 2;
//                 }
//             }
//             x := x + r;
//         } [1/2] {
//             {
//                 r := 0;
//             } [1/6] {
//                 {
//                     r := 1;
//                 } [1/5] {
//                     {
//                         r := 2;
//                     } [1/4] {
//                         {
//                             r := 3;
//                         } [1/3] {
//                             {
//                                 r := 4;
//                             } [1/2] {
//                                 r := 5;
//                             }
//                         }
//                     }
//                 }
//             }
//             x := x + r;
//         }
//         tick(2);
//     }

@ert
coproc main(init_x: UInt, init_n: UInt, init_r: UInt) -> (x: UInt, n: UInt, r: UInt)
    pre 1.14286 * ((init_n + 4) - init_x)
    post 0
{
    var prob_choice: Bool
    x = init_x
    n = init_n
    r = init_r
    @invariant(1.14286 * ((n + 4) - x))
    while x < n {
        prob_choice = flip((1/2))
        if prob_choice {
            prob_choice = flip((1/3))
            if prob_choice {
                r = 0
            } else {
                prob_choice = flip((1/2))
                if prob_choice {
                    r = 1
                } else {
                    r = 2
                }
            }
            x = x + r
        } else {
            prob_choice = flip((1/6))
            if prob_choice {
                r = 0
            } else {
                prob_choice = flip((1/5))
                if prob_choice {
                    r = 1
                } else {
                    prob_choice = flip((1/4))
                    if prob_choice {
                        r = 2
                    } else {
                        prob_choice = flip((1/3))
                        if prob_choice {
                            r = 3
                        } else {
                            prob_choice = flip((1/2))
                            if prob_choice {
                                r = 4
                            } else {
                                r = 5
                            }
                        }
                    }
                }
            }
            x = x + r
        }
        tick 2
    }
}
