// k-induction rule for k = 5

coproc k_induction(init_toSend: UInt, init_sent: UInt, init_maxFailed: UInt, init_failed: UInt, init_totalFailed: UInt) -> (toSend: UInt, sent: UInt, maxFailed: UInt, failed: UInt, totalFailed: UInt)
    pre ([init_toSend <= 4] * (init_totalFailed + 1)) + ([!(init_toSend <= 4)] * ∞)
    post totalFailed
{
    var prob_choice: Bool
    toSend = init_toSend
    sent = init_sent
    maxFailed = init_maxFailed
    failed = init_failed
    totalFailed = init_totalFailed
    coassert ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
    cohavoc failed, sent, totalFailed
    cocompare ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
    if (failed < maxFailed) && (sent < toSend) {
        prob_choice = flip(0.9)
        if prob_choice {
            failed = 0
            sent = sent + 1
        } else {
            failed = failed + 1
            totalFailed = totalFailed + 1
        }
        assert ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
        if (failed < maxFailed) && (sent < toSend) {
            prob_choice = flip(0.9)
            if prob_choice {
                failed = 0
                sent = sent + 1
            } else {
                failed = failed + 1
                totalFailed = totalFailed + 1
            }
            assert ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
            if (failed < maxFailed) && (sent < toSend) {
                prob_choice = flip(0.9)
                if prob_choice {
                    failed = 0
                    sent = sent + 1
                } else {
                    failed = failed + 1
                    totalFailed = totalFailed + 1
                }
                assert ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
                if (failed < maxFailed) && (sent < toSend) {
                    prob_choice = flip(0.9)
                    if prob_choice {
                        failed = 0
                        sent = sent + 1
                    } else {
                        failed = failed + 1
                        totalFailed = totalFailed + 1
                    }
                    assert ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
                    if (failed < maxFailed) && (sent < toSend) {
                        prob_choice = flip(0.9)
                        if prob_choice {
                            failed = 0
                            sent = sent + 1
                        } else {
                            failed = failed + 1
                            totalFailed = totalFailed + 1
                        }
                        assert ([toSend <= 4] * (totalFailed + 1)) + ([!(toSend <= 4)] * ∞)
                        assume 0
                    } else {}
                } else {}
            } else {}
        } else {}
    } else {}
}
